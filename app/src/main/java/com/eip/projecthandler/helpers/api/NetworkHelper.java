package com.eip.projecthandler.helpers.api;

import android.content.Context;
import android.text.TextUtils;

import com.android.volley.AuthFailureError;
import com.android.volley.RequestQueue;
import com.android.volley.Response;
import com.android.volley.VolleyError;
import com.android.volley.toolbox.JsonArrayRequest;
import com.android.volley.toolbox.JsonObjectRequest;
import com.android.volley.toolbox.Volley;
import com.eip.projecthandler.exceptions.AuthenticationException;
import com.eip.projecthandler.listeners.ArrayNetworkListener;
import com.eip.projecthandler.listeners.ObejctNetworkListener;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.util.HashMap;
import java.util.Map;

public class NetworkHelper {

    private static NetworkHelper instance;
    private final RequestQueue mRequestQueue;
    private String mAuthToken;

    private NetworkHelper(Context context) {
        mRequestQueue = Volley.newRequestQueue(context);
    }

    /**
     * Get the NetworkHelper instance.
     *
     * @param context The context.
     * @return The NetworkHelper instance.
     */
    public static NetworkHelper getInstance(Context context) {
        if (instance == null) instance = new NetworkHelper(context);
        return instance;
    }

    /**
     * Sets the authentication token that will be used to request the server.
     *
     * @param authToken The authentication token generated by the server.
     */
    public void setAuthToken(String authToken) {
        mAuthToken = authToken;
    }

    public String getAuthToken() {
        return this.mAuthToken;
    }

    /**
     * Calls the server.
     * Will call back LogInListener.onAuthenticateSuccess
     * or LogInListener.onAuthenticateError.
     *
     * @param obejctNetworkListener The network listener.
     * @param method          The method used. Must be like Request.Method.?
     * @param url             The url.
     * @throws AuthenticationException
     */
    public void objectRequestServer(final ObejctNetworkListener obejctNetworkListener, int method, String url) {
        if (!TextUtils.isEmpty(mAuthToken)) {
            objectRequestServerWithToken(obejctNetworkListener, method, url);
            return;
        }

        JsonObjectRequest request = new JsonObjectRequest(method, url,
                new Response.Listener<JSONObject>() {

                    @Override
                    public void onResponse(JSONObject response) {
                        if (obejctNetworkListener != null) try {
                            obejctNetworkListener.onCallSuccess(response);
                        } catch (JSONException e) {
                            e.printStackTrace();
                        }
                    }

                },
                new Response.ErrorListener() {

                    @Override
                    public void onErrorResponse(VolleyError error) {
                        if (obejctNetworkListener != null) obejctNetworkListener.onCallError(error);
                    }

                });
        mRequestQueue.add(request);
    }

    /**
     * Calls the server with the user authentication token.
     * Will call back LogInListener.onAuthenticateSuccess
     * or LogInListener.onAuthenticateError.
     *
     * @param obejctNetworkListener The network listener.
     * @param method          The method used. Must be like Request.Method.?
     * @param url             The url.
     * @throws AuthenticationException
     */
    private void objectRequestServerWithToken(final ObejctNetworkListener obejctNetworkListener,
                                              int method,
                                              String url) {
        url = url + "?token=" + mAuthToken;
        JsonObjectRequest request = new JsonObjectRequest(method, url,
                new Response.Listener<JSONObject>() {

                    @Override
                    public void onResponse(JSONObject response) {
                        if (obejctNetworkListener != null) try {
                            obejctNetworkListener.onCallSuccess(response);
                        } catch (JSONException e) {
                            e.printStackTrace();
                        }
                    }

                },
                new Response.ErrorListener() {

                    @Override
                    public void onErrorResponse(VolleyError error) {
                        if (obejctNetworkListener != null) obejctNetworkListener.onCallError(error);
                    }

                }
        ) {

            @Override
            public Map<String, String> getHeaders() throws AuthFailureError {
                Map<String, String> params = new HashMap<>();
                params.put("token", mAuthToken);
                return params;
            }

        };
        mRequestQueue.add(request);
    }

    public void arrayRequestServer(final ArrayNetworkListener arrayNetworkListener, int method, String url) {
        if (!TextUtils.isEmpty(mAuthToken)) {
            arrayRequestServerWithToken(arrayNetworkListener, method, url);
            return;
        }
        JsonArrayRequest request = new JsonArrayRequest(method, url,
                new Response.Listener<JSONArray>() {

                    @Override
                    public void onResponse(JSONArray response) {
                        if (arrayNetworkListener != null) try {
                            arrayNetworkListener.onCallSuccess(response);
                        } catch (JSONException e) {
                            e.printStackTrace();
                        }
                    }
                },
                new Response.ErrorListener() {

                    @Override
                    public void onErrorResponse(VolleyError error) {
                        if (arrayNetworkListener != null) arrayNetworkListener.onCallError(error);
                    }

                });
        mRequestQueue.add(request);
    }

    private void arrayRequestServerWithToken(final ArrayNetworkListener arrayNetworkListener,
                                             int method,
                                             String url) {
        url = url + "?token=" + mAuthToken;
        JsonArrayRequest request = new JsonArrayRequest(method, url,
                new Response.Listener<JSONArray>() {

                    @Override
                    public void onResponse(JSONArray response) {
                        if (arrayNetworkListener != null) try {
                            arrayNetworkListener.onCallSuccess(response);
                        } catch (JSONException e) {
                            e.printStackTrace();
                        }
                    }
                },
                new Response.ErrorListener() {

                    @Override
                    public void onErrorResponse(VolleyError error) {
                        if (arrayNetworkListener != null) arrayNetworkListener.onCallError(error);
                    }

                });
        mRequestQueue.add(request);
    }
}
