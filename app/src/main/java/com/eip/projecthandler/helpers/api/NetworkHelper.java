package com.eip.projecthandler.helpers.api;

import android.accounts.NetworkErrorException;
import android.content.Context;
import android.os.Bundle;
import android.text.TextUtils;

import com.android.volley.AuthFailureError;
import com.android.volley.Request;
import com.android.volley.RequestQueue;
import com.android.volley.Response;
import com.android.volley.VolleyError;
import com.android.volley.toolbox.JsonArrayRequest;
import com.android.volley.toolbox.JsonObjectRequest;
import com.android.volley.toolbox.Volley;
import com.eip.projecthandler.constants.AuthenticatorConstants;
import com.eip.projecthandler.exceptions.AuthenticationException;
import com.eip.projecthandler.helpers.account.AccountAuthenticator;
import com.eip.projecthandler.helpers.account.AccountHelper;
import com.eip.projecthandler.listeners.ArrayNetworkListener;
import com.eip.projecthandler.listeners.ObejctNetworkListener;
import com.eip.projecthandler.models.Account;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.util.HashMap;
import java.util.Map;

public class NetworkHelper {

    private static NetworkHelper instance;
    private final RequestQueue mRequestQueue;
    private String mAuthToken;

    private NetworkHelper(Context context) {
        mRequestQueue = Volley.newRequestQueue(context);
    }

    /**
     * Get the NetworkHelper instance.
     *
     * @param context The context.
     * @return The NetworkHelper instance.
     */
    public static NetworkHelper getInstance(Context context) {
        if (instance == null)
            instance = new NetworkHelper(context);
        return instance;
    }

    public String getAuthToken() {
        return this.mAuthToken;
    }

    /**
     * Sets the authentication token that will be used to request the server.
     *
     * @param authToken The authentication token generated by the server.
     */
    public void setAuthToken(String authToken) {
        mAuthToken = authToken;
    }

    public void retrieveToken(Context context) {
        AccountAuthenticator aAuth = new AccountAuthenticator(context);
        Account acc = AccountHelper.getAccount(context);
        Bundle bundle = null;
        try {
            bundle = aAuth.getAuthToken(null, acc, AuthenticatorConstants.AUTH_TOKEN_TYPE, null);
        } catch (NetworkErrorException e) {
            e.printStackTrace();
        }
        instance.setAuthToken((String) bundle.get("authtoken"));
    }

    /**
     * Calls the server.
     * Will call back LogInListener.onAuthenticateSuccess
     * or LogInListener.onAuthenticateError.
     *
     * @param obejctNetworkListener The network listener.
     * @param method                The method used. Must be like Request.Method.?
     * @param url                   The url.
     * @parm jsonObj                The data obj send with post request
     * @throws AuthenticationException
     */
    public void objectRequestServer(final ObejctNetworkListener obejctNetworkListener, int method, String url, JSONObject jsonObj) {
        if (!TextUtils.isEmpty(mAuthToken))
            url = url + "?token=" + mAuthToken;

        JsonObjectRequest request;
        if (jsonObj != null && method == Request.Method.POST) {
            request = new JsonObjectRequest(method, url, jsonObj, getOjectResponceSuccessListener(obejctNetworkListener), getObjectResponceErrorListener(obejctNetworkListener)) {
                @Override
                public Map<String, String> getHeaders() throws AuthFailureError {
                    Map<String, String> params = new HashMap<>();
                    if (!TextUtils.isEmpty(mAuthToken))
                        params.put("token", mAuthToken);
                    return params;
                }
            };
        } else {
            request = new JsonObjectRequest(method, url, getOjectResponceSuccessListener(obejctNetworkListener), getObjectResponceErrorListener(obejctNetworkListener)) {
                @Override
                public Map<String, String> getHeaders() throws AuthFailureError {
                    Map<String, String> params = new HashMap<>();
                    if (!TextUtils.isEmpty(mAuthToken))
                        params.put("token", mAuthToken);
                    return params;
                }
            };
        }
        mRequestQueue.add(request);
    }

    public void arrayRequestServer(final ArrayNetworkListener arrayNetworkListener, int method, String url, JSONObject jsonObj) {
        if (!TextUtils.isEmpty(mAuthToken))
            url = url + "?token=" + mAuthToken;

        JsonArrayRequest  request;
        if (jsonObj != null && method == Request.Method.POST)
            request = new JsonArrayRequest(method, url, jsonObj, getArrayResponceSuccessListener(arrayNetworkListener), getArrayResponceErrorListener(arrayNetworkListener));
        else
            request = new JsonArrayRequest(method, url, getArrayResponceSuccessListener(arrayNetworkListener), getArrayResponceErrorListener(arrayNetworkListener));

        mRequestQueue.add(request);
    }

    /* response method */
    private  Response.Listener<JSONObject> getOjectResponceSuccessListener(final ObejctNetworkListener obejctNetworkListener) {
        return new Response.Listener<JSONObject>() {
            @Override
            public void onResponse(JSONObject response) {
                if (obejctNetworkListener != null) try {
                    obejctNetworkListener.onCallSuccess(response);
                } catch (JSONException e) {
                    e.printStackTrace();
                }
            }
        };
    }

    private  Response.ErrorListener getObjectResponceErrorListener(final ObejctNetworkListener obejctNetworkListener) {
        return new Response.ErrorListener() {

            @Override
            public void onErrorResponse(VolleyError error) {
                if (obejctNetworkListener != null) obejctNetworkListener.onCallError(error);
            }
        };
    }

    private  Response.Listener<JSONArray> getArrayResponceSuccessListener(final ArrayNetworkListener arrayNetworkListener) {
        return new Response.Listener<JSONArray>() {
            @Override
            public void onResponse(JSONArray response) {
                if (arrayNetworkListener != null) try {
                    arrayNetworkListener.onCallSuccess(response);
                } catch (JSONException e) {
                    e.printStackTrace();
                }
            }
        };
    }

    private  Response.ErrorListener getArrayResponceErrorListener(final ArrayNetworkListener arrayNetworkListener) {
        return new Response.ErrorListener() {

            @Override
            public void onErrorResponse(VolleyError error) {
                if (arrayNetworkListener != null) arrayNetworkListener.onCallError(error);
            }
        };
    }

}
